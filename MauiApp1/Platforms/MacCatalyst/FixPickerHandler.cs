#nullable enable
using System;
using CoreGraphics;
using UIKit;
using Microsoft.Maui.Handlers;
using Microsoft.Maui.Platform;

namespace MauiApp1
{
    // Workaround for Picker not updating SelectedItem on Mac Catalyst
    // FixPickerHandler specified in MauiProgram.cs is a handler to update the selected item of the Picker.
    public class FixPickerHandler : PickerHandler
    {
        internal bool UpdateImmediately { get; set; }

        protected override void ConnectHandler(MauiPicker nativeView)
        {
            base.ConnectHandler(nativeView);
            nativeView.ShouldBeginEditing += OnShouldBeginEditing;
        }

        protected override void DisconnectHandler(MauiPicker nativeView)
        {
            base.DisconnectHandler(nativeView);
            nativeView.ShouldBeginEditing -= OnShouldBeginEditing;
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Interoperability", "CA1422:Validate platform compatibility")]
        bool OnShouldBeginEditing (UITextField textField)
        {         
            Task.Delay(100).ContinueWith(t =>
            {
                UIApplication.SharedApplication.InvokeOnMainThread(() =>
                {
                    var pickerController = GetPresentedPickerController();
                    if (pickerController != null)
                    {
                        var pickerView = (pickerController.View != null) ? FindPickerView(pickerController.View) : null;
                        if (pickerView != null)
                        {
                            // Select the initial item for UIPickerView
                            pickerView.Select(VirtualView.SelectedIndex, 0, false);

                            // Update the SelectIndex of the PickerSource class defined in PickerHandler.iOS.cs
                            pickerView.Model.Selected(pickerView, VirtualView.SelectedIndex, 0);
                        }
                    }
                });
            });

            return false;
        }

        // Get the UIAlertController generated by DisplayAlert in PickerHandler.iOS.cs
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Interoperability", "CA1422:Validate platform compatibility")]
        private UIAlertController? GetPresentedPickerController()
        {
            var rootViewController = UIApplication.SharedApplication.KeyWindow?.RootViewController;
            if (rootViewController != null)
            {
                var presentedViewController = rootViewController.PresentedViewController;
                if (presentedViewController is UIAlertController alertController)
                {
                    return alertController;
                }
            }
            return null;
        }

        // Recursively get UIPickerView from UIAlertController generated by DisplayAlert in PickerHandler.iOS.cs
        private UIPickerView? FindPickerView(UIView view)
        {
            foreach (var subview in view.Subviews)
            {
                if (subview is UIPickerView pickerView)
                {
                    return pickerView;
                }
                var result = FindPickerView(subview);
                if (result != null)
                {
                    return result;
                }
            }
            return null;
        }
    }
}